Spring Component: 	
	Frame works contains :  Core, Context, AOP, ORM, MVC 

	Core:
		Provides functionality of framework. Core is implemenation of BeanFactory. 
		Bean factory applies IOC. IOC is a pattern that seperates configuration from actual source code
		
	Context     --> ApplicationContext  is where the Spring beans are living
		It is spring configuration file that provides context information and enterprise services to the framework such as :
		 			
			EJB : Provies SpringBeanAutowiringInterceptor
			
			@Stateless(mappedName = "PhotoSession")
			@Interceptors(SpringBeanAutowiringInterceptor.class)
			@TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
			
			public class PhotoSession implements PhotoRemote {
				@Autowired
				private PhotoManager photoManager;
						
			Email				
			Localization
				<beans:bean id="messageSource"
					class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
					<beans:property name="basename" value="classpath:message" />
					<beans:property name="defaultEncoding" value="UTF-8" />
				</beans:bean>
			
			Validation			
				There is standard validation annonation  @Size(min=2, max=30), @Min(18), @NotNull
				Spring MVC  supports JSR-303 specs by default we can add JSR-303 and it’s implementation in Spring MVC application.  --> javax.validation.ConstraintValidator
				Spring also provides @Validator annotation and BindingResult class through which we can get the errors raised by Validator implementation in the controller request handler method.
    
			
			Scheduling functionality
	
	AOP : Aspect oriented programming 
		  AOP modularizes individual pieces of logic using crosscutting implementation.
		  It seperates buisness logics from system components
          it’s just an interceptor to intercept some processes During the exexution of method 
		  Spring AOP can hijack the executing method, and add extra functionality before or after the method execution.
		  
		  Has 2 types Static and Dynamic

			Joinpoint
			Are a core concept of AOP and define the points in your application at which we can insert additional logic
				Advice
					The code that is executed at a particular joint point, like before advice or after advice
				Pointcuts
					IS a collection of jointpoits that you use to define when advice should be executed
				Aspect 
					It’s a combination of advice and pointcuts 
				Weaving 
			This is the process of actually inserting aspects in to the application code at the appropriate 
			Point

	AOP example 		
		 @Aspect 
		 public class WebExceptionAspect {
			@AfterThrowing(pointcut="execution(public * ca.invesco.*)") {
				
			}
		}
		
	-----------
	<bean name ="performnaceMonitorAdvice" class="ca.invesco.web.common.aop.service.PerformanceMonitorAspect"
	<aop:aspectj-autoproxy proxy-target-class="true">
		<aop:include name="performanceNonitorAdvice" />
	<aop:aspectJ-autoproxy>
			
			

	ORM (Object Relational Map)
	---------------------------
	The Spring framework plugs into several ORM frameworks to provide its Object Relational tool, including JDO, Hibernate, and iBatis SQL Maps
	
	MVC
	----

	The Model-View-Controller (MVC) framework is a full-featured MVC implementation for building Web applications. 
	The MVC framework is highly configurable via strategy interfaces and JSP, Velocity, Tiles, iText, and POI.
	
	------------------------------------------------
	
	Benefit of Spring framework :
	   Layer based architecture : 
			We can just use one module and no need other modules like MVC
			
	   Aspect orineted programing : 
			hijack the execution of method by adding functionality before and after the method execution. cross cut implementation.
			
	  
	   Applies IOC 
			Inversion of control is some set of technics  to wire services  and components to an application. What offers is that instead of 
			application calling the framework it is the framework that calls the compoents that 
			are specificied by application 
			
			
	  Support dependeny injection :  
			Objects are given their dependencies at creation time rather than Lookup. no need to creare JNDI and etc .... 
			We do not create an object we describe how they should be created
		    We do not directly connect our component-> we describe which services are needed by which component in configuration file
		    IOC or Spring container is responsible for hooking it up from configuration file.
			
			component in configuration file , 

						
	   
	  Different type Dependency in spring


				Dependeny injection 
					1. Construction injetion provided by constructer Paramater
						
					<bean id="encyclopedia" name="encyclopedia-ref"	 class="ca.arkhls.ch03.listing36.model.ConfigurableEncyclopedia" >
						<constructor-arg>
							<util:map>
								<entry key="AgeOfUniverse"  value="100" />
								<entry key="ConstantOfLife" value="1250" />
							</util:map>
						</constructor-arg>
					</bean>
						
					2. Setter injection : provided by  Java bean 
					
					<bean id="simple" class="ca.arkhls.ch03.listing36.model.Simple"  init-method="init">
						<property name="name" value=""/>
						<property name="age" value="0"/>
					</bean> 

						
				Dependencu lookup :  it is more coupled.
					Lookup the JNDI to obtain dependecies from registration  -->    Content.getBean("my service")
					XmlPathXmlApplicationContext(classpath*:/spring-conifg.xml)
					
					
					
		IOC injects the components dependencies in to the component via java bean.	
		
		
		Bean instantiation (Scope):
	 	
	
		@Component –    Indicates a auto scan component. Register a class in to SPring context.
		@Repository –   Specialization of @Component for DAO layer. Supports DAO exception 
		@Service –      Specialization of @Component Indicates a Service component in the business layer.
		@Controller –   Indicates a controller component in the presentation layer.
		
			Specialzing the @componnet
		
		
		http://www.programmingforliving.com/2012/10/how-to-write-custom-bean-scope-in-spring.html
		
		
			<bean id="..." class="..." scope="singleton">
			By default all Beans are Singlton.   we can change that to the following : 

			SINGLTON : 	   	Retuirn a single bean instance per Spring container
			PROTOTYPE:     	Returns a  new instance of bean each time we request
			REQUEST : 	   	Returns a single bean instance per HttpRequest
			SESSION : 	   	Returns a single bean instance per HttpSession
			GLOBALSESSION: 	Return a single bean instance per global HTTP session. *
			THREAD :	    Scopes a single bean definition to thread local instance. 
							
							Every request for the bean will return the same instance with in a thread.
							This scope is not registered to the container by default, if you want to use this, you will have to register this explicitly as given below

							<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
								<property name="scopes">
									<map>
										<entry key="thread">
											<bean class="org.springframework.context.support.SimpleThreadScope"/>
										</entry>
									</map>
								</property>
							</bean>

			
			
			
			
	Spring Dependency check : @Required
	
		Dependency checking feature ensure the required properties have been set or injected.
		
		NONE    – No dependency checking.
		SIMPLE  – If any properties of primitive type (int, long,double…) and collection types (map, list..) have not been set, UnsatisfiedDependencyException will be thrown.
		OBJECTS – If any properties of object type have not been set, UnsatisfiedDependencyException will be thrown.
		ALL     – If any properties of any type have not been set, an UnsatisfiedDependencyException
				  will be thrown.
	
	
	we can do this by annotation :  --> @Required
	
	or dependecy check in  bean 
	
	<bean id="CustomerBean" class="com.mkyong.common.Customer"  dependency-check="simple">
		<property name="person" ref="PersonBean" />
		<property name="action" value="buy" />
	</bean>

	<bean id="PersonBean" class="com.mkyong.common.Person">
		<property name="name" value="mkyong" />
		<property name="address" value="address ABC" />
		<property name="age" value="29" />
	</bean>	
	
	
	Bean Factory 

	It is a factory class that conatins a collection of Beans. when we need any beans we can get it out of FactoryBean	
	
	

	ApplicationContext:
	It is an extention to BeanFactory to manage the beans
	
	Localeisation 
		Labels message bundle 
		
		<bean id="messageSource"  class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basenames" >
			  <list>
				  <value>messages</value>
			  </list>
			</property>
		</bean>	
	
	Lcoale change interceptor 
		
	 <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName" value="lang" />
    </bean>
     
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor" />
            </list>
        </property>
    </bean>
		
		
		
		Event publication
		Resource management and access 
		Automatic configuration

Lazy Initiation in Spring IOC   lazy-init
	Spring's bean factory is pre-initialzie all the beans when first time creating the factory some times we do not want that for the following reason :
	
	The following are the few drawbacks in pre-initiating all the beans at startup: 
		•	Takes long time to start the application. Since BeanFactory has to initiate all the beans even if it is unnecessary.
		•	More memory for storing all the beans
		
		initilaize the beans  when they are required is lazy loading. lazy-init is an attriute in IOC that tells the context not to initiate the beans at startup
		
lazy-init =  false   --> instantiate at startup 
lazy-init =  true   -->  No instantiate

		

Autowireing bean	
		Spring container is able to wire up relationships between collaborating beans automatically by inspecting the contents of the BeanFactory. The autowiring functionality has five modes.
		
	
Component-Scan
		We can scan a particular package and its subpackages for annotated classes and autowairing.
		<context: component-scan base-package=”ca.arkhls.service” />



By default, the @Autowired will perform the dependency checking to make sure the property has been wired properly. 
		@Autowired(required=false) will telll no dependecy check 

Spring custom tag lib:

1) Create 1 tld file then we add as many tags as we want to it. this tld file will ne reside in class path/resources 
2) Add this taglig to pour web.xml file in jsp-conifg tag
	<jsp-config>
		<taglib>	
			<taglib-uri>invescoTag</taglib-uri>
			<taglib-location>/WEB-INF/invescoTag.tld</taglib-location>
		</taglib>
		
	<jsp-config>

3.  add taglib tag to any JSP that we want to use our tag 
<% taglib  prefix="invesco" uri="invescoTag.tld"    %>

then poplate that in our JSP page

<td><invesco:booleanWrite  value="{account.retailMailFlag} /> "></td>		
invescoTag.tld
<?xml version="1.0" encoding="UTF-8"
<taglib>
		<tag>
			<name>booleanWrite</name>
			<tag-class>ca.invesco.web.common.tag.BooleanWriterTag</tag-class>
			// body-content could be either empty or JSP
			<body-content>empty</bodycontent>
			<info>This tag display boolean value in Yes or No format<info>

			<attribute>
				<name>value</name>
				<required>true</required>
				<description>Provide a display value</description>
				<rtexprvalue>true</rtexprvalue>
			</attribute>	

			<attribute>
				<name>defaultValueNA</name>
				<required>false</required>
				<description>Provide a display default value</description>
				<rtexprvalue>false</rtexprvalue>
			</attribute>	
			
			<attribute>
				<name>defaultValueEnglisg</name>
				<required>false</required>
				<description>Provide a display default value for french requires defautlValueNA=true. default will N/A if defaultvalueNA = true</description>
				<rtexprvalue>false</rtexprvalue>
			</attribute>	
		</tag>
</taglib>

Class BooleanWriterTag must extends --> TagSupport

import javax.servlet.jsp.jspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
import org.apache.log4j.Logger;

public class BooleanWriterTag  extends TagSupport{
	private boolean defaulValueNA;
	private String defaulValueEnglish;
	private String defaulValueFrench;
	private String value;
	
	public int doStartTag() throws JspException {
		boolean isFrench = pageContext.getResponse().getLocale().getLanguage().equals("fr") ? true:false;
		JspWriter out  = pageContext.getOut();
		try {
		if (StringUtils.isBlank(value) ) {
			if ( defaulValueNA) {
				if ( isFrench) {
					out.print(StringUtils.isNotBlank(defaulValueFrench) ? defaulValueFrench:"S.O.");
				} else {
					out.print(StringUtils.isNotBlank(defaulValueEnglish) ? defaulValueEnglish:  "N/A");
				} 
			}
			return SKIP_BODY;
		}
		
		if ( isFrench) {
			out.print(value.equals("true")? "Oui":"Non");
		} else {
			out.print(value.equals("true")? "Yes":"No");
		} 
		}catch (Exception ex) {
		}
	return SKIP_BODY;
}		
	
	public int doEndTag() throws JspException {
		return EVAL_PAGE;
	}

	
Main context of web.xml
----------------	
Here we can have 2 configuration for spring. root-context.xml at startup and servlet-context.xml file

root-context.xml file is mapped to ContextLoader listener. 
Usually aspect orintened configuration will be define in root-cotext.xml --> 
		1.	<aop:aspectj-autoproxy proxy-target-class="true" />
		2.	org.springframework.beans.factory.config.CustomScopeConfigurer
		3.	<import resouce="tile-context.xml" />
		4.   org.springframework.scheduling.commonj.WorkManagerTaskExecutor
		5.   org.springframework.scheduling.commonj.TimerManagerTaskScheduler
		6. 	 TaskExecuter
		
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/root-context.xml</param-value>	
</context-param>

<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

------------------------------------------------------------------------
 <servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>	
		</init-param>
        <load-on-startup>1</load-on-startup>
 </servlet>
 
 
 
 
 http://kumarnvm.blogspot.ca/2013/10/spring-task-execution-and-scheduling-25.html
 
 
 Spring CustomScopeConfigurer ? 
	what is  org.springframework.beans.factory.config.CustomScopeConfigurer ? 
 
	ScopeConfigurer module is a custom scope implementation for providing thread scoped beans. 
	Every request for a bean will return the same instance for the same thread. 
	A Runnable must be wrapped in a ThreadScopeRunnable if destruction callbacks should occur on a thread scoped bean.
 
 
 Spring WorkManagerTaskExecuter ?   ->  Asynch call service !

	The Spring Framework provides abstractions for asynchronous execution and scheduling of tasks with the TaskExecutor and TaskScheduler interfaces,
 
	CommonJ WorkManager scheduling  schedules  the threads that are managed by the application server such as Websphere and Weblogic 
	Avoid usning unmanaged threades that are created in Quartz scheduler, or the Timer Java JDK because which starts unmanaged.
	The CommonJ API only requires your class to implement java.lang.Runnable.
 
1. TaskExecuter for asynch call
SPring WorkManagerTaskExecuter integration with Weblogic task Manager

<bean id ="removeBriefcaseWorkManager" class="org.springframework.scheduling.commonj.WorkManagerTaskExecutor">
 	<property name="workManagerName" value = "java:comp/env/wm/RemoveBriefcase_workManager" /> 
 	<property name="resourceRef"     value="true" />
</bean>
	

 2. Scheduling fo Task 	
 
 Spring TimerManagerTaskScheduler ? 
 Spring also features integration classes for supporting scheduling with the Timer
 
 <task:executor id="accountExecuterService" pool-size="5" queue-capacity="10" />
 <task:scheduler  id="accountSchedulerService" pool-size="10" />
 <jee:jndi-lookup id="aimWebDataSource" jndi-name="aimWebDS"  expected-type="javax.sql.Datasource" />
 
 Sproing work Manager
distributed version of the CommonJ 
weblogic-application.xml
<wls:work-manager>
	<wls:name>wm/RemoveBRiefcase_workManager</wls:name>
	<wls-min-threads-constraint>
		<wls:name>minThreads</wls:name>
		<wls:count>1</wls:Count>
	</wls-min-threads-constraint>
	<wls-max-threads-constraint>
		<wls:name>mazThreads</wls:name>
		<wls:count>20</wls:Count>
		
	</wls-max-threads-constraint>
</wls:work-manager>

web.xml
<resouce-ref>
	<res-ref-name>vm/RemoveBriefcase_WrokManager</res-ref-name>
	<res-type>commonJ.work.WorkManager</res-type>
	<res-auth>container</res-auth>
	<res-sharing-scope>Shareable</res-sharing-scope>
</resource-ref>
 
 
SPring web service:
1  Create a wsdl that describes request, response and URls for web services 
2. Create a END popint class with @Endpoint  and @PayloadRoot to specify request and response object.
3. Configure Marshaler jax binding in spring
4. Create MessageDispactherServlet that Servlet URL mapping to WSDL 
5. Configure servlet mapping for schemaCollection,targetNameSpace

 

 
Spring MVC  : MODEL and VIEW 


1. Create Spring MVC application 

 1.  Create spring servlet  DispatcherServlet. 
 2.  Create init-param  with the value of Servler-spring.xml
 3.  Create Context parameer with a value of Spring-config.xml file 
 	   
<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
</context-param>

	<servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
        	<param-name>ContextConfigLocation</param-name>
        	<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
        </init-param>	
    </servlet>

    <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

	<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
	   
 ApplicationContextAware  : To access Context in none spring classes 
 
 Spring MVC startup 
 InitializingBean   interface to implement --> 
 @PostConstruct
 
 @ExceptionHandler could return ModelAndView or JSON String 
 
Change locale : 
we create Spring intercepter to intercept the request  HandlerInterceptorAdaptor
HandlerInterceptorAdaptor : it is the class that we extends in our change Locale 
 
The ApplicationContext is where your Spring beans live. The purpose of the ContextLoaderListener is two-fold:
to tie the lifecycle of the Spring ApplicationContext to the lifecycle of the ServletContext and
to automate the creation of the ApplicationContext, so you don't have to write explicit code to do create it - it's a convenience function.

Another convenient thing about the ServletContextListener is that it creates a WebApplicationContext and WebApplicationContext provides access to the ServletContext via ServletContextAware beans and the getServletContext method.

ServletContext : 
The ServletContext is an object that contains meta informaton about your web application. we can set attributes in ServeltCOntext and will be accessable via applications

ServletConfig
ServletConfig is a unique object per servlets. We cannot set attributes in ServletConfig.  
-----------------------------------------------------------------------------------------------------------------------------

Model : attributes that we add to be viewed

The ModelAndView  is simply a combination of the Model ( attributes that we added in the scope) and the view to be rendered by the Controller

Exposes several methods to add attributes to use in the view
ModelAndView mv = new ModelAndView(abc.jsp);
Model.addAttribute("persons",List<> pewrson);

ModelAttribute @ModelAttribute

It is biding a pojo inisde the model to Spring form 
@ModelAttribute("user") User user;


BindingResult
	It is an interface that extends Erros, we use BindingResult if sumbit form has not been validated
	

@Controller
public class UserController {
	@RequestMapping(value="user", method = RequestMethod.GET)
	public User user(){
		return new User(); 
	}
	@RequestMapping(value="createUser", method = RequestMethod.POST)
	public ModelAndView createUser(@ModelAttribute("user") @Valid User user,BindingResult result,ModelMap model) {
	    if(result.hasErrors()) {
	    	return new ModelAndView("user");
	    }
		model.addAttribute("name",user.getName());
		model.addAttribute("age",user.getAge());
		model.addAttribute("location",user.getLocation());
		return new ModelAndView("redirect:pages/success.jsp");
	}
}
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

public class User {
        @NotNull
        @Size(min=5, max=20)
        private String name;
	
	
}
  

  
  Difference between Spring 3 and 4 
  
  1. Supports JDK 8 
  2. deprecated packages and methods have  been removed 
  3. Added manage time zone support to localeContext
  4. @Description annoation has been introducded to develoepr  using Java-based configuration
  5. spring-websocket module provides comprehensive support for WebSocket-based
  6. new features in unit testing.


 Spring Security : 
 Step 1
 @EnableWebSecurity annotation and WebSecurityConfigurerAdapter work together to provide web based security. 
 By extending WebSecurityConfigurerAdapter
  
  @Configuration
  @EnableWebSecurity
	public class HelloWebSecurityConfiguration extends WebSecurityConfigurerAdapter {

	  @Autowired
	  public void configureGlobal(AuthenticationManagerBuilder auth) {
		auth
		  .inMemoryAuthentication()
			.withUser("user").password("password").roles("USER");
	  }
}

  Step 2
  AbstractAnnotationConfigDispatcherServletInitializer --> to Register the Spring WebSecurity
  
  Step 3 
  The last step is we need to map the springSecurityFilterChain. 
  
  <filter>
	<filter-name>springSecurityFilterChain</filter-name>
	<filter-class>
		org.springframework.web.filter.DelegatingFilterProxy
	</filter-class>
</filter>

<filter-mapping>
  <filter-name>springSecurityFilterChain</filter-name>
  <url-pattern>/*</url-pattern>
  <dispatcher>ERROR</dispatcher>
  <dispatcher>REQUEST</dispatcher>
</filter-mapping>
  
Difference between Sping boot and spring 
Simplifies your Spring dependencies, no more version collisions
can be run straight from a command line without an application container
build more with less code - no need for XML, not even web.xml, auto-configuration


Spring Transactional attrubutes 
PROPAGATION_REQUIRED	Support a current transaction, create a new one if none exists.This is the default setting. 
	If an existing transaction is in progress, method will run within that transaction, else a new transaction will be started.
PROPAGATION_SUPPORTS	Support a current transaction, execute non -transactionally if none exists.
PROPAGATION_MANDATORY	Support a current transaction, throw an exception if none exists.
PROPAGATION_REQUIRES_NEW	Create a new transaction, suspend the current transaction if one exists
PROPAGATION_NOT_SUPPORTED	Execute non - transactionally, suspend the current transaction if one exists.
PROPAGATION_NEVER	Execute non - transactionally, throw an exception if a transaction exists
PROPAGATION_NESTED	Method should run within a nested transaction if an existing transaction exists.The nested transaction can be committed/roll backed independently of the enclosing transaction. If no enclosing transaction behave like PROPAGATION_REQUIRED.
	
	
Lumbda Expression 
Allows me to write a method in the same place you are going to use it. It is a method without declration

Optionals
It is a container object which is used to contain not-null objects. isPresent()
 Optioanls opt = Opetional.ofNullable(value)
 opt.isPresent()
stream 
	 gets/computes elements on demand. It never stores the elements. 
	 Source −  Stream takes Collections, Arrays, or I/O resources as input source.
	 Aggregate operations − Stream supports aggregate operations like filter, map, limit, reduce, find, match, and so on.
RunTime Java script

Concurrent accumulators
AtomicInteger
	