XSLT: 

XML style sheet and Transformation :  
to transofrm XML in to plain HTML  we are using XSLT 
--------------------------------------------------------

JAXP

The Java API for XML Processing, or JAXP (pronounced jaks-p), 
is one of the Java XML programming APIs. It provides the capability of validating and parsing XML documents.

SAX --> Simple API for a larg XML document 
DOM: --> Document Object Model --> Read xml file to the memory and parse it to tree of Object 

Difference between SAX and DOM 
SAX is ecent and stream based, DOM is Tree based in memory 
SAX can handle any size. DOM depends on the Memory
DOM slower at run time but gives ability to backward and forward search during the tags 




--------------------------------------------------------

JAXB 

Java Architecture for XML Binding (JAXB)

Allows Java developers to map Java classes to XML representations.

JAXB
The ability to marshal Java objects into XML and the inverse,  unmarshal XML back into Java objects.
In other words, JAXB allows storing and retrieving data in memory in any XML format, 

without the need to implement a specific set of XML loading and saving routines for the program's class structure.

JAXB is particularly useful when the specification is complex and changing. 
In such a case, regularly changing the XML Schema definitions to keep them synchronised with the Java definitions can be time
consuming and error prone.

--------------------------------------------------------

SOAP 
is a simple XML-based protocol to let applications exchange information over HTTP.
Short for Simple Object Access Protocol, a lightweight XML-based messaging protocol 
used to encode the information in Web service request and response messages before
sending them over a network. SOAP messages are independent of any operating system or 
protocol and may be transported using a variety of Internet protocols, including SMTP, MIME, and HTTP. 
Also see Understanding "Web Services" in the "Did You Know...?" section of Webopedia.

--------------------------------------------------------

JAX-RPC :
Allows a Java application to invoke a Java-based Web Service with a known description

JAX-WS 2.0
The JAX-RPC name is misleading, developers assume that all JAX-RPC is about is just RPC, 
not Web Services. By renaming JAX-RPC to JAX-WS we can eliminate this confusion. 

----------------------------------------------------------------

WSDL 
-----
WSDL (Web Services Description Language) 
      is an XML-based language for describing Web services and how to access them.

	The document describes a Web service. 
	It specifies the location of the service and the operations (or methods) that privides the services
  
  
An XML-formatted language used to describe a Web service's capabilities as collections of communication 
endpoints capable of exchanging messages. WSDL is an integral part of UDDI, an XML-based worldwide business registry.
WSDL is the language that UDDI uses. WSDL was developed jointly by Microsoft and IBM. 
--------------------------------------------------------------------------------

UDDI
A Web-based distributed directory that enables businesses to list themselves on the Internet 
and discover each other, similar to a traditional phone book's yellow and white pages. 




A Web service is a software system designed to support  machine-to-machine interaction over a network. 
It has an interface described in a machine-processable format (specifically WSDL).
Other systems interact with the Web service in a manner prescribed by its 
description using SOAP messages, typically conveyed using HTTP with an XML 
serialization in conjunction with other Web-related standards.]


Web Service Security : 
It is the the protocol specifies how integrity and confidentiality can be enforced on messages and allows the communication of various security token formats
Apache CXF, Spring Web service Security 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Web Service Implemenattion 


1. Identify our Request, Response, if they are not just parameter we should create request and response in th efomrat of Java XML 

2. Create @WebService interfecer with @Webmethod methods within interface

3. create END point class to implement @Webservcie interface and @Webparam parameter 

4.  in web.xml file we define  WSServlet and WSServletContentxLister. --> The URL pattern of the servlet will be our WS URL 

	<listener>
        <listener-class>
                com.sun.xml.ws.transport.http.servlet.WSServletContextListener
        </listener-class>
    </listener>
	
    <servlet>
        <servlet-name>hello</servlet-name>
        <servlet-class>
        	com.sun.xml.ws.transport.http.servlet.WSServlet
        </servlet-class>
    </servlet>
	<servlet-mapping>  
			<servlet-name>HelloWorldWS</servlet-name>  
			<url-pattern>/HelloWorldWS</url-pattern>  
	</servlet-mapping>  

	5.  Endpoint definitaion :  --> sun-jaxws.xml 
	
	<endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime" version="2.0">  
<endpoint   name="HelloWorldWS"  
            implementation="org.arpit.javapostsforlearning.webservice.HelloWorldImpl"  
            url-pattern="/HelloWorldWS"/>  
</endpoints>   




JAX-WS attachment 
-------------------
We are using @MTOM annotation for attachments.     

MTOM stands for Message Transmission Optimization Mechanism ,    and XOP -> 

@MTOM  : 
@WebService(endpointInterface = "com.mkyong.ws.ImageServer")
public class ImageServerImpl implements ImageServer{
	public Image downloadImage(String name) {
		try {
			File image = new File("c:\\images\\" + name);
			return ImageIO.read(image);
	}


JAX-WS Handler: 
It is SOAP message interceptor.  it intercepts incoming and outgoing SOAP messages and can manipulate its values 
can be implemented in both server side and client side

1. create a class that implements SOAPHandler 
  public class PersonHandler implements SOAPHandler<SOAPMessageContext> {
  
  }
  
 2. handler-chain.xml -->  create it and put SOAP handler 
 
 @Webservice
 @HandlerChain(file="handler-chain.xml")
 public class myEndpoints { 
 
 }
 
 
 @WebServiceClient(name = "ServerInfoService", 
	targetNamespace = "http://ws.mkyong.com/", 
	wsdlLocation = "http://localhost:8888/ws/server?wsdl")
@HandlerChain(file="handler-chain.xml")
public class ServerInfoService extends Service


Web service Athentication :
1. application authentication JAX-WS:  --> we put user name and encrypt password or token in to header of WS and in server side by filter athenticate the SOAP message
2. realm : UserDatabaseRealm in TOmcat or SQL Autheticate in Weblogic

<login-config>
      	<auth-method>BASIC</auth-method>
   	</login-config>
  
<security-constraint>
      	<web-resource-collection>
        	<web-resource-name>Operator Roles Security</web-resource-name>
        	<url-pattern>/user</url-pattern>
      	</web-resource-collection>

      	<auth-constraint>
        	<role-name>operator</role-name>
      	</auth-constraint>
      	<user-data-constraint>
          	<transport-guarantee>NONE</transport-guarantee>
      	</user-data-constraint>
   	</security-constraint>  
  
  
  
  @SessionAttribute does not fully replaces the traditinal HttpSession management. Better to be set in more than single Contrtoller. and It is good to store data in short term 
  long term still HttpSession better.


  Spring Security : 
  
  @EnableWebSecurity 
  Create a class that extends --> Spring WebSecurityConfigurerAdapter

  
  