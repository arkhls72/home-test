<?xml version="1.0" encoding="UTF-8"?>

<!-- ###################################################################### -->
<!-- Proxy Security Context Configuration -->
<!-- ###################################################################### -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- ====================================================================== -->
	<!-- HTTP Basic Authentication -->
	<!-- Although not as secure as Digest, this approach works with a password -->
	<!-- encoder enabled in the authentication manager. Passwords can be stored -->
	<!-- encrypted in the database. In addition, the password administrative -->
	<!-- functions of the web application UI can be leveraged :)-->
	<!-- It is recommend to use this approach with SSL/TLS -->
	<!-- ====================================================================== -->

	<bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="${authentication.basic.realm}" />
	</bean>

	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- |           Web REST Client Security Configuration section           | -->
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

 	<security:http pattern="/**" create-session="stateless" use-expressions="true">
		<security:intercept-url pattern="/proxy/**" access="hasAuthority('VIEWER')" />
		<security:http-basic entry-point-ref="basicAuthenticationEntryPoint" />
		<!-- ================================================================ -->
		<!-- cross site request forgery enabled by default - it blocks login -->
		<!-- ================================================================ -->
		<security:csrf disabled="true"/>
	</security:http>

  	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- |                    Authority Management section                    | -->
 	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

 	<!-- ====================================================================== -->
    <!-- Declare an instance of the Spring Security DAO -->
    <!-- override the built-in queries to reference the ADMIN security tables -->
 	<!-- ====================================================================== -->

	<bean id="digitalJdbcDaoImpl" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="proxyDataSource" />
		<property name="enableAuthorities" value="true" />
		<property name="enableGroups" value="false" />
		<!-- query overrides to use ACME table structure -->
		<property name="usersByUsernameQuery" ref="digitalUsersByUsernameQuery" />
		<property name="authoritiesByUsernameQuery" ref="digitalAuthoritiesByUsernameQuery" />
		<property name="groupAuthoritiesByUsernameQuery" ref="digitalGroupAuthoritiesByUsernameQuery" />
	</bean>

	<bean id="digitalUsersByUsernameQuery" class="java.lang.String">
		<constructor-arg value="SELECT u.user_name as username, password, CASE WHEN u.status = 'ACTIVE' THEN '1' ELSE '1' END as enabled
			FROM adm_user u, adm_user_role ur
			WHERE u.user_name = ?
			AND u.user_name = ur.user_name" />
	</bean>
	
	<bean id="digitalAuthoritiesByUsernameQuery" class="java.lang.String">
		<constructor-arg value="SELECT ur.user_name as username, ur.role_name as authority
			FROM adm_user_role ur
			WHERE ur.user_name = ?" />
	</bean>
	
	<bean id="digitalGroupAuthoritiesByUsernameQuery" class="java.lang.String">
		<constructor-arg value="SELECT g.group_id as id, group_name, ga.role_name as authority 
			FROM adm_group g, adm_user_group ug, adm_group_role ga 
			WHERE ug.user_name = ? AND g.group_id = ga.group_id AND g.group_id = ug.group_id AND g.status = 'ACTIVE'" />
	</bean>
	
 	<!-- =================================================================== -->
    <!-- Declare a BCrypt password encoder for use with Basic authentication -->
 	<!-- =================================================================== -->

	<bean name="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

 	<!-- ============================================================= -->
    <!-- Declare an authentication manager and authentication provider -->
 	<!-- ============================================================= -->

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="digitalJdbcDaoImpl">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

 	<!-- ====================================================================== -->
    <!-- Security Event Log Writer to log to the database and/or file system -->
 	<!-- ====================================================================== -->

	<bean id="digitalSecurityEventLogger" class="com.home.digital.server.security.SecurityEventLogger">
		<property name="enableFileLogger" value="true" />
		<property name="enableDatabaseLogger" value="false" />
		<property name="securityService" ref="securityService" />
	</bean>
	
 	<!-- ====================================================================== -->
    <!-- Security Event Listeners used to capture security events -->
 	<!-- ====================================================================== -->

	<bean class="com.home.digital.server.security.AuthenticationEventListener">
		<property name="securityEventLogger" ref="digitalSecurityEventLogger" />
	</bean>
	
	<bean class="com.home.digital.server.security.AuthorizationEventListener">
		<property name="securityEventLogger" ref="digitalSecurityEventLogger" />
	</bean>
	
	<bean class="com.home.digital.server.security.LogoutEventListener">
		<property name="securityEventLogger" ref="digitalSecurityEventLogger" />
	</bean>

 	<!-- ====================================================================== -->
    <!-- Security bootstrap for processing that must be run at each startup -->
 	<!-- ====================================================================== -->

<!-- 	<bean class="com.home.digital.server.SecurityBootstrapBean" init-method="secureDatabase" depends-on="proxyDataSource, securityService"> -->
<!-- 		<property name="dataSource" ref="proxyDataSource" /> -->
<!-- 		<property name="passwordEncoder" ref="passwordEncoder" /> -->
<!-- 		<property name="securityService" ref="securityService" /> -->
<!-- 	</bean> -->

</beans>
